# -*- coding: utf-8 -*-
import subprocess

# Refinement Phase Scirpts
REQUIREMENT_SCRIPTS = [
    'R2-PLCGen/UseCase_Agent.py',
    'R2-PLCGen/Pattern_Agent.py',
    'R2-PLCGen/Property_Agent.py',
    'R2-PLCGen/SMV_Agent.py',
    'R2-PLCGen/Req_Agent.py',
]

# Code Generaion Phase Scripts
CODE_GENERATION_SCRIPTS = [
    'R2-PLCGen/Code_Agent.py',
    'R2-PLCGen/Debug_Agent.py',
]

print("--- Starting Requirement Refinement Phase ---")
refinement_iteration = 1
while True:
    print(f"\n--- Requirement Refinement Iteration: {refinement_iteration} ---")
    all_scripts_successful_this_iteration = True
    for script_index, script in enumerate(REQUIREMENT_SCRIPTS):
        print(f"\nRunning {script} (Script {script_index + 1}/{len(REQUIREMENT_SCRIPTS)} of current iteration)...")
        try:
            # Use check=True,If it fails, turn CalledProcessError
            # If you want to see the output, add capture_output=True, text=True
            result = subprocess.run(['python', script], check=True)
            print(f"[SUCCESS] {script} completed with return code {result.returncode}.")

            # 在 SMV_Verif_Constructor.py 运行后，提示用户进行 nuXmv 验证
            if script == 'SMV_Verif_Constructor.py':
                print("\n" + "="*70)
                print("ACTION REQUIRED: Please run nuXmv tool to verify the generated SMV model.")
                print("The SMV model should have been generated by SMV_Verif_Constructor.")
                print("Observe the verification results for the specified CTL/LTL properties.")
                print("These results will be used as input/feedback for the R2IL_ReqAgent.")
                print("="*70 + "\n")
                input("Press Enter to confirm you have completed nuXmv verification and are ready to run R2IL_ReqAgent...")

        except subprocess.CalledProcessError as e:
            print(f"[ERROR] {script} failed with return code {e.returncode}.")
            # If you wanna see the details in failue:
            # if e.stdout:
            #     print(f"STDOUT on error:\n{e.stdout.decode(errors='replace')}")
            # if e.stderr:
            #     print(f"STDERR on error:\n{e.stderr.decode(errors='replace')}")
            all_scripts_successful_this_iteration = False
            user_choice_on_fail = input(f"Script {script} failed. "
                                        "Enter 's' to stop entire workflow, "
                                        "or any other key to skip to user input for this iteration: ").lower()
            if user_choice_on_fail == 's':
                print("Workflow stopped due to script failure.")
                exit() # exit
            break # break down workflow

    if not all_scripts_successful_this_iteration:
        print("\nNot all scripts in this refinement iteration were successful.")
    else:
        print("\nAll scripts in this refinement iteration completed successfully.")


    # One iteration complete, choose to refine another time or just exit
    user_input = input("\nRequirement refinement iteration completed. \n"
                       "Enter 'end' or 'leave' to finalize requirements and proceed to code generation.\n"
                       "Enter 'retry' to re-run this refinement iteration.\n"
                       "Enter any other key to run another refinement iteration: ").lower()

    if user_input.lower() in ["leave", "end"]:
        print("\n--- Requirement Refinement Phase Concluded ---")
        break 
    elif user_input.lower() == 'retry':
        print("Retrying current refinement iteration.")
        continue
    else:
        refinement_iteration += 1
        print("Starting next refinement iteration.")


# --- Code Generation ---
print("\n\n--- Starting Code Generation Phase ---")
all_code_gen_successful = True
for script in CODE_GENERATION_SCRIPTS:
    print(f"\nRunning {script}...")
    try:
        result = subprocess.run(['python', script], check=True)
        print(f"[SUCCESS] {script} completed with return code {result.returncode}.")
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] {script} failed with return code {e.returncode}.")
        all_code_gen_successful = False
        user_choice_on_fail = input(f"Script {script} failed. "
                                    "Enter 's' to stop, "
                                    "or any other key to continue with next code generation script (if any): ").lower()
        if user_choice_on_fail == 's':
            print("Code generation stopped due to script failure.")
            break 
if all_code_gen_successful:
    print("\n--- Code Generation Phase Completed Successfully ---")
else:
    print("\n--- Code Generation Phase Completed with Errors ---")

print("\n--- Workflow Finished ---")
