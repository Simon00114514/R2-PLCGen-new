VAR_GLOBAL
    I : ARRAY[0..0,0..7] OF BOOL;
    IB : ARRAY[0..0] OF BYTE;
    ID : ARRAY[0..0] OF DWORD;
    IW : ARRAY[0..0] OF WORD;
    IX : ARRAY[0..0,0..7] OF BOOL;
    Q : ARRAY[0..0,0..7] OF BOOL;
    QB : ARRAY[0..0] OF BYTE;
    QD : ARRAY[0..0] OF DWORD;
    QW : ARRAY[0..0] OF WORD;
    QX : ARRAY[0..0,0..7] OF BOOL;
    M : ARRAY[0..0,0..7] OF BOOL;
    MB : ARRAY[0..0] OF BYTE;
    MD : ARRAY[0..0] OF DWORD;
    MW : ARRAY[0..0] OF WORD;
    MX : ARRAY[0..0,0..7] OF BOOL;
    PIB : ARRAY[0..0] OF BYTE;
    PID : ARRAY[0..0] OF DWORD;
    PIW : ARRAY[0..0] OF WORD;
    PQB : ARRAY[0..0] OF BYTE;
    PQD : ARRAY[0..0] OF DWORD;
    PQW : ARRAY[0..0] OF WORD;
    
	T_CYCLE : TIME;
	__GLOBAL_TIME : TIME;
END_VAR

// # 14 Standard Functions of S7-SCL

// ## 14.1 Data Type Conversion Functions
// ### 14.1.2.1 Conversion Functions Class A
// Class A conversions -- does not have to be explicit
FUNCTION BOOL_TO_BYTE : BYTE VAR_INPUT in : BOOL; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION BOOL_TO_DWORD : DWORD VAR_INPUT in : BOOL; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION BOOL_TO_WORD : WORD VAR_INPUT in : BOOL; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION BYTE_TO_DWORD : DWORD VAR_INPUT in : BYTE; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION BYTE_TO_WORD : WORD VAR_INPUT in : BYTE; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION CHAR_TO_STRING : STRING VAR_INPUT in : CHAR; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DINT_TO_REAL : REAL VAR_INPUT in : DINT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION INT_TO_DINT : DINT VAR_INPUT in : INT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION INT_TO_REAL : REAL VAR_INPUT in : INT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION WORD_TO_DWORD : DWORD VAR_INPUT in : WORD; END_VAR BEGIN //#BUILTIN END_FUNCTION

// ### 14.1.3.1 Conversion Functions Class B
// Class B conversions -- must be explicit
FUNCTION BOOL_TO_INT : INT VAR_INPUT in : BOOL; END_VAR BEGIN BOOL_TO_INT:=WORD_TO_INT(BOOL_TO_WORD(in)); END_FUNCTION
FUNCTION BOOL_TO_DINT : DINT VAR_INPUT in : BOOL; END_VAR BEGIN BOOL_TO_DINT:=DWORD_TO_DINT(BOOL_TO_DWORD(in)); END_FUNCTION
FUNCTION BYTE_TO_BOOL : BOOL VAR_INPUT in : BYTE; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION BYTE_TO_CHAR : CHAR VAR_INPUT in : BYTE; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION BYTE_TO_INT : INT VAR_INPUT in : BYTE; END_VAR BEGIN BYTE_TO_INT:=WORD_TO_INT(BYTE_TO_WORD(in)); END_FUNCTION
FUNCTION BYTE_TO_DINT : DINT VAR_INPUT in : BYTE; END_VAR BEGIN BYTE_TO_DINT:=DWORD_TO_DINT(BYTE_TO_DWORD(in)); END_FUNCTION
FUNCTION CHAR_TO_BYTE : BYTE VAR_INPUT in : CHAR; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION CHAR_TO_INT : INT VAR_INPUT in : CHAR; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DATE_TO_DINT : DINT VAR_INPUT in : DATE; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DINT_TO_DATE : DATE VAR_INPUT in : DINT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DINT_TO_DWORD : DWORD VAR_INPUT in : DINT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DINT_TO_INT : INT VAR_INPUT in : DINT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DINT_TO_TIME : TIME VAR_INPUT in : DINT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DINT_TO_TOD : TOD VAR_INPUT in : DINT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DINT_TO_BOOL : BOOL VAR_INPUT in : DINT; END_VAR BEGIN DINT_TO_BOOL:=DWORD_TO_BOOL(DINT_TO_DWORD(in)); END_FUNCTION
FUNCTION DINT_TO_BYTE : BYTE VAR_INPUT in : DINT; END_VAR BEGIN DINT_TO_BYTE:=DWORD_TO_BYTE(DINT_TO_DWORD(in)); END_FUNCTION
FUNCTION DINT_TO_STRING : STRING VAR_INPUT in : DINT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DINT_TO_WORD : WORD VAR_INPUT in : DINT; END_VAR BEGIN DINT_TO_WORD:=DWORD_TO_WORD(DINT_TO_DWORD(in)); END_FUNCTION
FUNCTION DWORD_TO_BOOL : BOOL VAR_INPUT in : DWORD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DWORD_TO_BYTE : BYTE VAR_INPUT in : DWORD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DWORD_TO_DINT : DINT VAR_INPUT in : DWORD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DWORD_TO_REAL : REAL VAR_INPUT in : DWORD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DWORD_TO_WORD : WORD VAR_INPUT in : DWORD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DWORD_TO_INT : INT VAR_INPUT in : DWORD; END_VAR BEGIN DWORD_TO_INT:=DINT_TO_INT (DWORD_TO_DINT(in)); END_FUNCTION
FUNCTION INT_TO_CHAR : CHAR VAR_INPUT in : INT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION INT_TO_WORD : WORD VAR_INPUT in : INT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION INT_TO_BOOL : BOOL VAR_INPUT in : INT; END_VAR BEGIN INT_TO_BOOL:=WORD_TO_BOOL(INT_TO_WORD(in)); END_FUNCTION
FUNCTION INT_TO_BYTE : BYTE VAR_INPUT in : INT; END_VAR BEGIN INT_TO_BYTE:=WORD_TO_BYTE(INT_TO_WORD(in)); END_FUNCTION
FUNCTION INT_TO_DWORD : DWORD VAR_INPUT in : INT; END_VAR BEGIN INT_TO_DWORD:=WORD_TO_DWORD(INT_TO_WORD(in)); END_FUNCTION
FUNCTION INT_TO_STRING : STRING VAR_INPUT in : INT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION REAL_TO_DINT : DINT VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION REAL_TO_DWORD : DWORD VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION REAL_TO_INT : INT VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION REAL_TO_STRING : STRING VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION STRING_TO_CHAR : CHAR VAR_INPUT in : STRING; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION STRING_TO_INT : INT VAR_INPUT in : STRING; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION STRING_TO_DINT : DINT VAR_INPUT in : STRING; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION STRING_TO_REAL : REAL VAR_INPUT in : STRING; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION TIME_TO_DINT : DINT VAR_INPUT in : TIME; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION TOD_TO_DINT : DINT VAR_INPUT in : TOD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION WORD_TO_BOOL : BOOL VAR_INPUT in : WORD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION WORD_TO_BYTE : BYTE VAR_INPUT in : WORD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION WORD_TO_INT : INT VAR_INPUT in : WORD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION WORD_TO_DINT : DINT VAR_INPUT in : WORD; END_VAR BEGIN WORD_TO_DINT:=INT_TO_DINT(WORD_TO_INT(in)); END_FUNCTION
FUNCTION WORD_TO_BLOCK_DB : BLOCK_DB VAR_INPUT in : WORD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION BLOCK_DB_TO_WORD : WORD VAR_INPUT in : BLOCK_DB; END_VAR BEGIN //#BUILTIN END_FUNCTION

FUNCTION BCD_TO_INT : INT VAR_INPUT in : WORD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION BCD16_TO_INT : INT VAR_INPUT in : WORD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION WORD_BCD_TO_INT : INT VAR_INPUT in : WORD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION INT_TO_BCD : WORD VAR_INPUT in : INT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION INT_TO_BCD_WORD : WORD VAR_INPUT in : INT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION BCD_TO_DINT : DINT VAR_INPUT in : DWORD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DWORD_BCD_TO_DINT : DINT VAR_INPUT in : DWORD; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DINT_TO_BCD : DWORD VAR_INPUT in : DINT; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION DINT_TO_BCD_DWORD : DWORD VAR_INPUT in : DINT; END_VAR BEGIN //#BUILTIN END_FUNCTION

// ### 14.1.3.2 Functions for Rounding and Truncating
FUNCTION ROUND : DINT
	VAR_INPUT
		in : REAL;
	END_VAR
	VAR_TEMP
		truncVal : DINT;
	END_VAR
BEGIN 
	//#BUILTIN
	truncVal := TRUNC(in); 
	IF (in - DINT_TO_REAL(truncVal)) < 0.5 AND (in - DINT_TO_REAL(truncVal)) >= -0.5  THEN
		ROUND := truncVal;
	ELSE
		IF (in >= 0) THEN
			ROUND := truncVal + 1;
		ELSE
			ROUND := truncVal - 1;
		END_IF;
	END_IF;
	(* Checked assertions:
		//#ASSERT ROUND(3.2) = 3
		//#ASSERT ROUND(4.7) = 5
		//#ASSERT ROUND(6.0) = 6
		//#ASSERT ROUND(6.5) = 7
		//#ASSERT ROUND(-0.2) = 0
		//#ASSERT ROUND(-0.7) = -1
		//#ASSERT ROUND(-1.2) = -1
		//#ASSERT ROUND(-2.7) = -3	
	*)
END_FUNCTION
FUNCTION TRUNC : DINT VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN TRUNC := REAL_TO_DINT(in); END_FUNCTION

// ## 14.2 Numeric Standard Functions
// ### 14.2.1 General Arithmetic Standard Functions
FUNCTION ABS : ANY_NUM
	VAR_INPUT
		in : ANY_NUM;
	END_VAR
BEGIN
	//#BUILTIN
	IF in > 0 THEN ABS := in; ELSE ABS := (-1*in); END_IF;
END_FUNCTION

FUNCTION SQR : REAL
	VAR_INPUT
		in : ANY_NUM;
	END_VAR
BEGIN
	//#BUILTIN
	SQR := in;
	SQR := SQR * in;
END_FUNCTION

FUNCTION SQRT : REAL VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN END_FUNCTION

// ### 14.2.2 Logarithmic Functions
FUNCTION EXP : REAL VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION LN : REAL VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION LOG : REAL VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN END_FUNCTION



// ### 14.2.3 Trigonometric Functions
FUNCTION SIN : REAL VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION COS : REAL VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION TAN : REAL VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION ASIN : REAL VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION ACOS : REAL VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION ATAN : REAL VAR_INPUT in : REAL; END_VAR BEGIN //#BUILTIN END_FUNCTION

// ## 14.3 Bit String Standard Functions
FUNCTION ROR : DWORD
	VAR_INPUT IN : DWORD; N : INT; END_VAR
	// TODO ANY_BIT?
	//#BUILTIN
END_FUNCTION
FUNCTION ROL : DWORD
	VAR_INPUT IN : DWORD; N : INT; END_VAR
	//#BUILTIN
END_FUNCTION

FUNCTION SHR : DWORD
	VAR_INPUT IN : DWORD; N : INT; END_VAR
	//#BUILTIN
END_FUNCTION
FUNCTION SHL : DWORD
	VAR_INPUT IN : DWORD; N : INT; END_VAR
	//#BUILTIN
END_FUNCTION

// ## 14.4 Processing Strings
FUNCTION LEN : INT VAR_INPUT S : STRING; END_VAR //#BUILTIN END_FUNCTION
FUNCTION CONCAT : STRING VAR_INPUT IN1,IN2 : STRING; END_VAR //#BUILTIN END_FUNCTION
	// TODO: up to 32 inputs; input can be CHAR too
FUNCTION LEFT : STRING VAR_INPUT IN : STRING; L : INT; END_VAR //#BUILTIN END_FUNCTION
FUNCTION RIGHT : STRING VAR_INPUT IN : STRING; L : INT; END_VAR //#BUILTIN END_FUNCTION
FUNCTION MID : STRING VAR_INPUT IN : STRING; L, P : INT; END_VAR //#BUILTIN END_FUNCTION
FUNCTION INSERT : STRING VAR_INPUT IN1, IN2 : STRING; P : INT; END_VAR //#BUILTIN END_FUNCTION
FUNCTION DELETE : STRING VAR_INPUT IN : STRING; L, P : INT; END_VAR //#BUILTIN END_FUNCTION
FUNCTION REPLACE : STRING VAR_INPUT IN1, IN2 : STRING; L, P : INT; END_VAR //#BUILTIN END_FUNCTION
FUNCTION FIND : INT VAR_INPUT IN1, IN2 : STRING; END_VAR //#BUILTIN END_FUNCTION

FUNCTION EQ_STRING : BOOL VAR_INPUT S1, S2 : STRING; END_VAR //#BUILTIN EQ_STRING := (S1 = S2); END_FUNCTION
FUNCTION NE_STRING : BOOL VAR_INPUT S1, S2 : STRING; END_VAR //#BUILTIN NE_STRING := (S1 <> S2); END_FUNCTION
FUNCTION GE_STRING : BOOL VAR_INPUT S1, S2 : STRING; END_VAR //#BUILTIN GE_STRING := (S1 >= S2); END_FUNCTION
FUNCTION LE_STRING : BOOL VAR_INPUT S1, S2 : STRING; END_VAR //#BUILTIN LE_STRING := (S1 <= S2); END_FUNCTION
FUNCTION GT_STRING : BOOL VAR_INPUT S1, S2 : STRING; END_VAR //#BUILTIN GT_STRING := (S1 > S2); END_FUNCTION
FUNCTION LT_STRING : BOOL VAR_INPUT S1, S2 : STRING; END_VAR //#BUILTIN LT_STRING := (S1 < S2); END_FUNCTION

FUNCTION INT_TO_STRING : STRING VAR_INPUT I : INT; END_VAR //#BUILTIN END_FUNCTION
FUNCTION STRING_TO_INT : INT VAR_INPUT S : STRING; END_VAR //#BUILTIN END_FUNCTION
FUNCTION DINT_TO_STRING : STRING VAR_INPUT I : DINT; END_VAR //#BUILTIN END_FUNCTION
FUNCTION STRING_TO_DINT : DINT VAR_INPUT S : STRING; END_VAR //#BUILTIN END_FUNCTION
FUNCTION REAL_TO_STRING : STRING VAR_INPUT IN : REAL; END_VAR //#BUILTIN END_FUNCTION
FUNCTION STRING_TO_REAL : REAL VAR_INPUT S : STRING; END_VAR //#BUILTIN END_FUNCTION

// ## 14.5 Functions for selecting values
FUNCTION SEL : ANY_NUM // TODO: can be non-numeric too
	VAR_INPUT
		D : BOOL;
		IN0, IN1 : ANY_NUM;
	END_VAR
BEGIN
	//#BUILTIN
	IF D THEN
		SEL := IN0;
	ELSE
		SEL := IN1;
	END_IF;
END_FUNCTION


FUNCTION MAX : ANY_NUM
	VAR_INPUT
		IN1, IN2 : ANY_NUM;
		// TODO: may have >2 inputs too, input can be time too
	END_VAR
BEGIN
	//#BUILTIN
	IF IN1 > IN2 THEN MAX := IN1; ELSE MAX := IN2;  END_IF;
END_FUNCTION

FUNCTION MIN : ANY_NUM
	VAR_INPUT
		IN1, IN2 : ANY_NUM;
		// TODO: may have >2 inputs too, input can be time too
	END_VAR
BEGIN
	//#BUILTIN
	IF IN1 > IN2 THEN MIN := IN2; ELSE MIN := IN1;  END_IF;
END_FUNCTION

FUNCTION LIMIT : ANY_NUM
	VAR_INPUT
		MN : ANY_NUM;
		IN : ANY_NUM;
		MX : ANY_NUM;
		// TODO Can be TIME too
	END_VAR
BEGIN
	//#BUILTIN
	IF IN < MN THEN
		LIMIT := MN;
	ELSIF IN > MX THEN
		LIMIT := MX;
	ELSE
		LIMIT := IN;
	END_IF;
	// TODO verify the behavior
END_FUNCTION

// MUX is missing

// ### 14.6.1
FUNCTION EQ_DT : BOOL VAR_INPUT D1, D2 : DT; END_VAR //#BUILTIN EQ_DT := (D1 = D2); END_FUNCTION
FUNCTION NE_DT : BOOL VAR_INPUT D1, D2 : DT; END_VAR //#BUILTIN NE_DT := (D1 <> D2); END_FUNCTION
FUNCTION GT_DT : BOOL VAR_INPUT D1, D2 : DT; END_VAR //#BUILTIN GT_DT := (D1 > D2); END_FUNCTION
FUNCTION GE_DT : BOOL VAR_INPUT D1, D2 : DT; END_VAR //#BUILTIN GE_DT := (D1 >= D2); END_FUNCTION
FUNCTION LE_DT : BOOL VAR_INPUT D1, D2 : DT; END_VAR //#BUILTIN LE_DT := (D1 <= D2); END_FUNCTION
FUNCTION LT_DT : BOOL VAR_INPUT D1, D2 : DT; END_VAR //#BUILTIN LT_DT := (D1 < D2); END_FUNCTION

FUNCTION AD_DT_TM : DT VAR_INPUT IN1 : DT; IN2 : TIME; END_VAR //#BUILTIN AD_DT_TM := IN1 + IN2; END_FUNCTION
FUNCTION SB_DT_TM : DT VAR_INPUT IN1 : DT; IN2 : TIME; END_VAR //#BUILTIN SB_DT_TM := IN1 - IN2; END_FUNCTION
FUNCTION SB_DT_DT : TIME VAR_INPUT IN1 : DT; IN2 : DT; END_VAR //#BUILTIN SB_DT_DT := IN1 - IN2; END_FUNCTION
FUNCTION TIME_TO_S5TIME : S5TIME VAR_INPUT in : TIME; END_VAR BEGIN //#BUILTIN END_FUNCTION
FUNCTION S5TIME_TO_TIME : TIME VAR_INPUT in : S5TIME; END_VAR BEGIN //#BUILTIN END_FUNCTION


// Others
FUNCTION DPRD_DAT : INT
	VAR_INPUT LADDR : ANY; RECORD : ANY; END_VAR
	//#BUILTIN
END_FUNCTION
FUNCTION DPWR_DAT : INT
	VAR_INPUT LADDR : ANY; RECORD : ANY; END_VAR
	//#BUILTIN
END_FUNCTION

// Timers

// On-delay timer 
FUNCTION_BLOCK TON
// updated on 23/06/2017
VAR_INPUT
	PT : TIME; // pulse time
	IN : BOOL;
END_VAR

VAR_OUTPUT
	Q : BOOL := FALSE;
	ET : TIME := T#0s; // elapsed time
END_VAR

VAR
	running : BOOL := FALSE;
	start : TIME := T#0ms;
END_VAR

BEGIN
	if IN = false then
		Q := false;
		ET := T#0s;
		running := false;
	else
		// in this case IN == TRUE
		if running = false then
		// just started
			start := __GLOBAL_TIME;
			running := true;
			ET := T#0MS;
			// Q = false, ET = 0
			
			IF PT = T#0ms THEN
				Q := true;
			END_IF;
		else
			if not (__GLOBAL_TIME - (start + pt) >= T#0s) then
			// running, but no timeout
			// do not modify Q
				if not Q then
					ET := __GLOBAL_TIME - start;
				end_if;
				// ET should be good even if GT>0 & due < 0
			else
			// timeout
				Q := true;
				ET := PT;
			end_if;
		end_if;
	end_if;
END_FUNCTION_BLOCK

FUNCTION_BLOCK TOF // TODO improve implementation
VAR_INPUT
	PT : TIME; // pulse time
	IN : BOOL;
END_VAR
VAR_OUTPUT
	Q : BOOL;
	ET : TIME ; // elapsed time 
END_VAR
VAR
	ton : TON;
	inWasOnceTrue : BOOL := FALSE;
END_VAR
BEGIN
	IF inWasOnceTrue THEN
		ton(PT := PT, IN := NOT IN);
		ET := ton.ET;
		Q := NOT ton.Q;
	ELSE
		Q := IN;
		ET := T#0s;
		inWasOnceTrue := inWasOnceTrue OR IN;
	END_IF;
END_FUNCTION_BLOCK 

// Pulse timer
FUNCTION_BLOCK TP
// updated on 20/06/2018
VAR_INPUT
	PT : TIME;
	IN : BOOL;
END_VAR

VAR_OUTPUT
	Q : BOOL := FALSE;
	ET : TIME; // elapsed time
END_VAR

VAR
	old_in : BOOL := FALSE;
	due_set : BOOL := FALSE; // TODO: revise, this may be removed by using Q
	due : TIME := T#0ms;
END_VAR

BEGIN
	if (in and not old_in) and not Q then
		// rising edge detected, start timing
		due := __GLOBAL_TIME + pt;
		due_set := true; // maybe set Q instead?
	end_if;
	if __GLOBAL_TIME <= due AND due_set then
		Q := true;
		ET := PT - (due - __GLOBAL_TIME);
	else
		Q := false;
		due_set := false;
		if in then
			ET := PT;
		else
			ET := T#0MS;
		end_if;
	end_if;
	old_in := in;
END_FUNCTION_BLOCK



// LMNGEN_C: Output Continuous PID Controller
// See: Modular PID control, Section 2.1.13, p. 2-50
FUNCTION_BLOCK LMNGEN_C
VAR_INPUT
	MAN : REAL;
	LMN_HLM : REAL := 100.0;
	LMN_LLM : REAL;
	LMN_URLM : REAL := 10;
	LMN_DRLM : REAL := 10;
	DF_OUTV : REAL;
	MAN_ON : BOOL := TRUE;
	MANGN_ON : BOOL;
	MANUP : BOOL;
	MANDN : BOOL;
	LMNRC_ON : BOOL;
	DFOUT_ON : BOOL;
	COM_RST : BOOL;
	CYCLE : TIME := T#1s;
	PID_LMNG : STRUCT
		PID_OUTV : REAL;
		PID_SCTR : REAL;
		END_STRUCT;
END_VAR

VAR_OUTPUT
	LMN : REAL;
	QLMN_HLM : BOOL;
	QLMN_LLM : BOOL;
	LMNG_PID : STRUCT
			LMN : REAL;
			LMN_HLM : REAL;
			LMN_LLM : REAL;
			R_MTR_TM : REAL;
			ARWHL_ON : BOOL;
			ARWLL_ON : BOOL;
			MAN_ON : BOOL;
			LMNGS_ON : BOOL;
			LMNR_ON : BOOL;
		END_STRUCT;
END_VAR

BEGIN
	//#BUILTIN
	IF MAN_ON THEN
		LMN := MAN;
	ELSE
		LMN := PID_LMNG.PID_OUTV;
	END_IF;
	
	IF (LMN > LMN_HLM) THEN 
		LMN := LMN_HLM;
	ELSIF (LMN < LMN_LLM) THEN
		LMN := LMN_LLM;
	END_IF;
	
	LMNG_PID.LMN := LMN;
END_FUNCTION_BLOCK


FUNCTION_BLOCK PID
VAR_INPUT
	PV : REAL;
END_VAR

VAR_OUTPUT
	PID_LMNG : REAL;
END_VAR

BEGIN
	PID_LMNG := PV;
END_FUNCTION_BLOCK


// ROC_LIM: Rate of Change Limiter
// See: Modular PID control, Section 2.1.23, p. 2-115
FUNCTION_BLOCK ROC_LIM
VAR_INPUT
	INV : REAL;
    UPRLM_P : REAL := 10.0;
    DNRLM_P : REAL := 10.0;
    UPRLM_N : REAL := 10.0;
    DNRLM_N : REAL := 10.0;
	H_LM : REAL := 100.0; 
	L_LM : REAL;
    PV : REAL;
    DF_OUTV : REAL;
    DFOUT_ON : BOOL;
    TRACK : BOOL;
    MAN_ON : BOOL;
    COM_RST : BOOL;
	CYCLE : TIME := T#1s; 
END_VAR

VAR_OUTPUT
	OUTV : REAL;
	QUPRLM_P : BOOL;
	QDNRLM_P : BOOL;
	QUPRLM_N : BOOL;
	QDNRLM_N : BOOL;
	QH_LM : BOOL;
	QL_LM : BOOL;
END_VAR

BEGIN
	//#BUILTIN
	OUTV := INV;
		
	IF (OUTV > H_LM) THEN 
		OUTV := H_LM;
	ELSIF (OUTV < L_LM) THEN
		OUTV := L_LM;
	END_IF;
END_FUNCTION_BLOCK


// LAG1ST: First-Order Lag Element
// See: Modular PID control, Section 2.1.9, p. 2-35
FUNCTION_BLOCK LAG1ST
VAR_INPUT
	INV : REAL;
	TM_LAG : TIME := T#25s;
	DF_OUTV  :REAL;
	TRACK : BOOL;
	DFOUT_ON : BOOL;
	COM_RST : BOOL;
	CYCLE : TIME := T#1s; 
END_VAR

VAR_OUTPUT
	OUTV : REAL;
END_VAR

BEGIN
	//#BUILTIN
	OUTV := INV;
END_FUNCTION_BLOCK


// PULSEGEN: Pulse Generator
// See: Modular PID control, Section 2.1.21, p. 2-95
FUNCTION_BLOCK PULSEGEN
VAR_INPUT
	INV : REAL;
	PER_TM : TIME := T#1s;
    P_B_TM: TIME := T#50ms;
    RATIOFAC : REAL := 1.0;
    STEP3_ON : BOOL := TRUE;
    ST2BI_ON : BOOL;
    MAN_ON : BOOL;
    POS_P_ON : BOOL;
    NEG_P_ON : BOOL;
    SYN_ON  : BOOL := TRUE;
    COM_RST : BOOL;
    CYCLE : TIME := T#10ms;
END_VAR

VAR_OUTPUT
	QPOS_P : BOOL;
	QNEG_P : BOOL;
END_VAR
BEGIN
	//#BUILTIN
	IF INV = 0 THEN
		QPOS_P := FALSE;
	ELSE
		QPOS_P := TRUE; // very dumb implementation
	END_IF;

	QNEG_P := NOT QPOS_P;
END_FUNCTION_BLOCK

// DIF: Differentiator
// See: Modular PID control, Section 2.1.6, p. 2-19
FUNCTION_BLOCK DIF
	VAR_INPUT
		INV     : REAL := 0.0; // Input variable
		TD      : TIME := T#25s; // Derivative time value
		TM_LAG  : TIME := T#5s; // Time lag
		COM_RST : BOOL; // Complete restart
		CYCLE   : TIME := T#1s; // Sampling time
	END_VAR

	VAR_OUTPUT
		OUTV : REAL := 0.0; // Output variable
	END_VAR

	VAR
		LastINV : REAL;
	END_VAR
BEGIN
//#BUILTIN
	#OUTV := (DINT_TO_REAL(TIME_TO_DINT(#TD))) * (#INV - #LastINV) / DINT_TO_REAL(TIME_TO_DINT(#CYCLE));
	#LastINV := #INV;
END_FUNCTION_BLOCK


// INTEG: Integrator
// See: Modular PID control, Section 2.1.8, p. 2-27
FUNCTION_BLOCK INTEG
	VAR_INPUT
		INV      : REAL; // Input variable
		H_LM     : REAL := 100.0; // High limit
		L_LM     : REAL := 0.0; // Low limit
		TI       : TIME := T#25s; // Reset time
		DF_OUTV  : REAL := 0.0; // Default output variable
		HOLD     : BOOL; // Integrator hold
		DFOUT_ON : BOOL; // Default output variable on
		COM_RST  : BOOL; // Complete restart
		CYCLE    : TIME := T#1s; // Sampling time
	END_VAR

	VAR_OUTPUT
		OUTV  : REAL; // Output variable
		QH_LM : BOOL; // High limit reached
		QL_LM : BOOL; // Low limit reached
	END_VAR
BEGIN
		// Basic implementation based on BE-ICS's implementation
	#OUTV := #OUTV + #INV * DINT_TO_REAL(TIME_TO_DINT(#CYCLE)) / DINT_TO_REAL(TIME_TO_DINT(#TI));
END_FUNCTION_BLOCK





