Output structure:
{
  "use_case": "<Brief description or identifier of the use case>",
  "patterns-i(i=1,2,3...)": [
    {
      "pattern_name": "<Pattern Type>",[Pattern Type is the name of the pattern, e.g., only can be:"pattern-implication/pattern-invariant/pattern-forbidden/pattern-statechange-duringcycle/pattern-statechange-betweencycles/pattern-reachability/pattern-repeatability/pattern-leadsto/pattern-leadsto-trigger/pattern-leadsto-earlier/timed-trigger", etc.]
      "Informal requirement": If {1} is true at the end of the PLC cycle, then {2} should always be true at the end of the same cycle.
      "Formal requirement": "<Pattern Formula with corresponding>",[once you selected one pattern, this content cannot be modified, only can be filled with CTL or LTL desicription in the definition of Patterns. For example:AG({PLC_END} --> NOT ({1})) (type: ctl)]
      "parameters": {
        "{1}": "<Extracted condition or state>",
        "{2}": "<Extracted condition or state>",
        '{1}' and '{2}' can only be filled with CTL or LTL formula logic expressions
        // Include all parameters relevant to the pattern
      }
    },
    // Additional patterns if applicable
  ]
}

Example based on provided patterns:
{
      "use_case": "UC-4 Process Emergency Vehicle Request",
      "patterns": [
        {
          "pattern_name": "pattern-implication",
          "Informal requirement": If {1} is true at the end of the PLC cycle, then {2} should always be true at the end of the same cycle. ,[once you selected 'Implication', this content cannot be modified, follow the patterns set in relevant file]
          "Formal requirement": AG(({PLC_END} AND ({1})) --> ({2})) (type: ctl),[once you selected 'Implication', this content cannot be modified, follow the patterns set in relevant file]
          "parameters": {
            "{1}": "emergency_vehicle_detected AND sensors_ok",
            "{2}": "emergency_state"
          }
        },
        {
          "pattern_name": "pattern-leadsto-earlier",
          "Informal requirement": If {1} is true at the end of a cycle, {2} was true at the beginning of this or an earlier cycle. ,[once you selected 'pattern-leadsto-earlier', this content cannot be modified, follow the patterns set in relevant file]
          "Formal requirement": G(({PLC_END} AND ({1})) --> O({PLC_START} AND ({2}))) (type: ltl),[once you selected 'pattern-leadsto-earlier', this content cannot be modified, follow the patterns set in relevant file]
          "parameters": {
            "{1}": "emergency_vehicle_detected AND pedestrian_button_pressed AND sensors_ok",
            "{2}": "light = red"
          }
        }
      ]
    }

Pattern grammar:
⟨pattern_document⟩ ::= LBRACE EOL?
                      STRING ':' STRING ',' EOL?
                      STRING ':' LBRACK EOL?
                      ⟨pattern_object⟩ ( ',' EOL? ⟨pattern_object⟩ )* EOL?
                      RBRACK EOL?
                      RBRACE EOF

⟨pattern_object⟩ ::= LBRACE EOL?
                     ( ⟨pattern_name_pair⟩ ',' EOL?
                       ⟨informal_req_pair⟩ ',' EOL?
                       ⟨Formal requirement⟩ ',' EOL?
                       ⟨parameters_pair⟩
                     | ⟨informal_req_pair⟩ ',' EOL?
                       ⟨Formal requirement⟩ ',' EOL?
                       ⟨parameters_pair⟩ ',' EOL?
                       ⟨pattern_name_pair⟩
                     ) EOL?
                     RBRACE

⟨pattern_name_pair⟩      ::= P_NAME_KEY ':' ⟨pattern_name_value⟩
⟨informal_req_pair⟩     ::= INF_REQ_KEY ':' STRING
⟨Formal requirement⟩ ::= CTL_LTL_KEY ':' STRING

⟨parameters_pair⟩ ::= PARAMS_KEY ':' LBRACE EOL?
                        ⟨parameter⟩ ( ',' EOL? ⟨parameter⟩ )* EOL?
                      RBRACE

⟨parameter⟩ ::= STRING ':' STRING

⟨pattern_name_value⟩ ::= P_IMPLICATION
                        | P_INVARIANT
                        | P_FORBIDDEN
                        | P_STATECHANGE_DURING
                        | P_STATECHANGE_BETWEEN
                        | P_REACHABILITY
                        | P_REPEATABILITY
                        | P_LEADSTO
                        | P_LEADSTO_TRIGGER
                        | P_LEADSTO_EARLIER
                        | P_TIMED_TRIGGER
                        | STRING

–– Lexer tokens (terminals) ––
LBRACE            ::= '{'
RBRACE            ::= '}'
LBRACK            ::= '['
RBRACK            ::= ']'
P_NAME_KEY        ::= '"pattern_name"'
INF_REQ_KEY       ::= '"Informal requirement"'
CTL_LTL_KEY       ::= '"Formal requirement"'
PARAMS_KEY        ::= '"parameters"'

P_IMPLICATION         ::= '"pattern-implication"'
P_INVARIANT           ::= '"pattern-invariant"'
P_FORBIDDEN           ::= '"pattern-forbidden"'
P_STATECHANGE_DURING  ::= '"pattern-statechange-duringcycle"'
P_STATECHANGE_BETWEEN ::= '"pattern-statechange-betweencycles"'
P_REACHABILITY        ::= '"pattern-reachability"'
P_REPEATABILITY       ::= '"pattern-repeatability"'
P_LEADSTO             ::= '"pattern-leadsto"'
P_LEADSTO_TRIGGER     ::= '"pattern-leadsto-trigger"'
P_LEADSTO_EARLIER     ::= '"pattern-leadsto-earlier"'
P_TIMED_TRIGGER       ::= '"timed-trigger"'

STRING ::= '"' ( ~["\\] | '\\' . )* '"'
         | '\'' ( ~['\\] | '\\' . )* '\''

EOL ::= [\r\n]+
WS  ::= [ \t]+   (skipped)

