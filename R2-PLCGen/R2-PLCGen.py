# -*- coding: utf-8 -*-
import subprocess

# 需求细化阶段的脚本列表
REQUIREMENT_SCRIPTS = [
    'UseCase_Agent.py',
    'Pattern_Agent.py',
    'Property_Agent.py',
    'SMV_Agent.py', # 注意：这里 SMV_Verif_Constructor.py 后面应该有个逗号
    "Req_Agent.py",      # 确保 R2IL_ReqAgent.py 是列表的最后一个，以便在其后询问
]

# 代码生成阶段的脚本列表
CODE_GENERATION_SCRIPTS = [
    'Code_Agent.py',
    'Debug_Agent.py',
]

print("--- Starting Requirement Refinement Phase ---")
refinement_iteration = 1
while True:
    print(f"\n--- Requirement Refinement Iteration: {refinement_iteration} ---")
    all_scripts_successful_this_iteration = True
    for script_index, script in enumerate(REQUIREMENT_SCRIPTS):
        print(f"\nRunning {script} (Script {script_index + 1}/{len(REQUIREMENT_SCRIPTS)} of current iteration)...")
        try:
            # 使用 check=True，如果脚本失败会抛出 CalledProcessError
            # 为了能看到输出，可以添加 capture_output=True, text=True，但错误处理会更复杂些
            # 为了简单，先保持你原始的调用方式
            result = subprocess.run(['python', script], check=True)
            print(f"[SUCCESS] {script} completed with return code {result.returncode}.")

            # 在 SMV_Verif_Constructor.py 运行后，提示用户进行 nuXmv 验证
            if script == 'SMV_Verif_Constructor.py':
                print("\n" + "="*70)
                print("ACTION REQUIRED: Please run nuXmv tool to verify the generated SMV model.")
                print("The SMV model should have been generated by SMV_Verif_Constructor.")
                print("Observe the verification results for the specified CTL/LTL properties.")
                print("These results will be used as input/feedback for the R2IL_ReqAgent.")
                print("="*70 + "\n")
                input("Press Enter to confirm you have completed nuXmv verification and are ready to run R2IL_ReqAgent...")

        except subprocess.CalledProcessError as e:
            print(f"[ERROR] {script} failed with return code {e.returncode}.")
            # 如果你想看到失败时的输出，可以这样做：
            # if e.stdout:
            #     print(f"STDOUT on error:\n{e.stdout.decode(errors='replace')}")
            # if e.stderr:
            #     print(f"STDERR on error:\n{e.stderr.decode(errors='replace')}")
            all_scripts_successful_this_iteration = False
            user_choice_on_fail = input(f"Script {script} failed. "
                                        "Enter 's' to stop entire workflow, "
                                        "or any other key to skip to user input for this iteration: ").lower()
            if user_choice_on_fail == 's':
                print("Workflow stopped due to script failure.")
                exit() # 直接退出程序
            break # 中断当前迭代的后续脚本

    if not all_scripts_successful_this_iteration:
        print("\nNot all scripts in this refinement iteration were successful.")
        # 即使失败，也给用户选择的机会
    else:
        print("\nAll scripts in this refinement iteration completed successfully.")


    # 在 R2IL_ReqAgent.py (或列表最后一个脚本) 运行完后询问用户是否继续当前阶段
    user_input = input("\nRequirement refinement iteration completed. \n"
                       "Enter 'end' or 'leave' to finalize requirements and proceed to code generation.\n"
                       "Enter 'retry' to re-run this refinement iteration.\n"
                       "Enter any other key to run another refinement iteration: ").lower()

    if user_input.lower() in ["leave", "end"]:
        print("\n--- Requirement Refinement Phase Concluded ---")
        break  # 退出 while 循环，准备进入代码生成阶段
    elif user_input.lower() == 'retry':
        print("Retrying current refinement iteration.")
        # iteration 不自增，直接 continue
        continue
    else:
        refinement_iteration += 1
        print("Starting next refinement iteration.")


# --- 代码生成阶段 ---
print("\n\n--- Starting Code Generation Phase ---")
all_code_gen_successful = True
for script in CODE_GENERATION_SCRIPTS:
    print(f"\nRunning {script}...")
    try:
        result = subprocess.run(['python', script], check=True)
        print(f"[SUCCESS] {script} completed with return code {result.returncode}.")
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] {script} failed with return code {e.returncode}.")
        all_code_gen_successful = False
        user_choice_on_fail = input(f"Script {script} failed. "
                                    "Enter 's' to stop, "
                                    "or any other key to continue with next code generation script (if any): ").lower()
        if user_choice_on_fail == 's':
            print("Code generation stopped due to script failure.")
            break # 中断代码生成阶段
if all_code_gen_successful:
    print("\n--- Code Generation Phase Completed Successfully ---")
else:
    print("\n--- Code Generation Phase Completed with Errors ---")

print("\n--- Workflow Finished ---")