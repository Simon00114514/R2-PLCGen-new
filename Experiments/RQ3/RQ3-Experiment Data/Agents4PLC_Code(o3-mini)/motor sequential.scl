PROGRAM MotorSequentialControl
VAR
    // Motor start outputs 鈥� issued as pulses
    Motor1_Start : BOOL := FALSE;
    Motor2_Start : BOOL := FALSE;
    Motor3_Start : BOOL := FALSE;
    
    // Timer function blocks for delays between motor start pulses
    Timer1 : TON;    // Timer for delaying Motor2 startup (5 seconds)
    Timer2 : TON;    // Timer for delaying Motor3 startup (5 seconds)
    
    // State variable for managing sequence phases:
    // 0: Initialize and issue Motor1 start pulse,
    // 1: Wait for Timer1; then pulse Motor2 start,
    // 2: Wait for Timer2; then pulse Motor3 start,
    // 3: Finalize Motor3 pulse.
    State : INT := 0;
    
    // Optional reset flag to restart the sequence, if needed
    Reset : BOOL := FALSE;
END_VAR

CASE State OF

    0:
        // Pulse Motor1 start signal and start Timer1 for Motor2 delay
        Motor1_Start := TRUE;
        Timer1(IN := TRUE, PT := T#5s);
        State := 1;
        
    1:
        // When Timer1 completes, end Motor1 pulse and pulse Motor2 start
        IF Timer1.Q THEN
            Motor1_Start := FALSE;  // End Motor1 pulse
            Motor2_Start := TRUE;   // Issue Motor2 start pulse
            Timer2(IN := TRUE, PT := T#5s);
            State := 2;
        END_IF;
        
    2:
        // When Timer2 completes, end Motor2 pulse and pulse Motor3 start
        IF Timer2.Q THEN
            Motor2_Start := FALSE;  // End Motor2 pulse
            Motor3_Start := TRUE;   // Issue Motor3 start pulse
            State := 3;
        END_IF;
        
    3:
        // Finalize Motor3 pulse: allow the signal to be active for one cycle only.
        IF Motor3_Start THEN
            Motor3_Start := FALSE;  // Clear the pulse on the next cycle
        END_IF;
        
END_CASE;

END_PROGRAM