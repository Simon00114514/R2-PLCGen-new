PROGRAM PID_LiquidControl
(*
  Enhanced PID control for the liquid level in a distillation column.
  This revision includes a dynamic sample time calculation, anti-windup for the integral term,
  and optional derivative filtering for smoother control action.

  Control logic:
    鈥 The PID controller computes an output based on the error (SetPoint minus LiquidLevel)
      using proportional, integral, and derivative components.
    鈥 The integral term is clamped to prevent windup.
    鈥 A derivative filter smooths high-frequency changes.
    鈥 The inlet valve is commanded by the rule:
         鈥 Open the valve (InletValveOpen = TRUE) when LiquidLevel is below SetPoint.
         鈥 Close the valve (InletValveOpen = FALSE) when LiquidLevel is equal to or above SetPoint.

  Revision: 1.2 鈥 Date: (Enter Date)
*)

VAR
    // Analog Inputs
    LiquidLevel      : REAL;   // Measured liquid level in the column
    SetPoint         : REAL;   // Desired liquid level threshold
    Kp               : REAL;   // Proportional gain
    Ki               : REAL;   // Integral gain
    Kd               : REAL;   // Derivative gain

    // Digital Output
    InletValveOpen   : BOOL;   // TRUE: Valve open; FALSE: Valve closed
END_VAR

VAR
    // Internal PID variables
    Error            : REAL := 0.0;
    PrevError        : REAL := 0.0;
    Proportional     : REAL := 0.0;
    Integral         : REAL := 0.0;
    Derivative       : REAL := 0.0;
    PID_Output       : REAL := 0.0;
    
    // Timing variables using a timer function block instance
    CurrentTime      : UDINT;    // Current system time in milliseconds
    LastTime         : UDINT := 0;
    deltaT           : REAL := 0.1; // Sampling time in seconds (fallback value)
    
    // Instance of the system timer (assumed to be available on your platform)
    SysTimer         : T_PLC_MS;
    
    // Derivative filtering variables
    FilteredDerivative : REAL := 0.0;
    FilterCoeff        : REAL := 0.1;  // Lower values yield stronger smoothing
    
    // Anti-windup limits for the integral term
    IntMin           : REAL := -100.0;
    IntMax           : REAL := 100.0;
END_VAR

// Update the system timer
SysTimer();
CurrentTime := SysTimer.T_PLC_MS;

// Calculate the sample time (deltaT) in seconds using elapsed time
IF LastTime = 0 THEN
    deltaT := 0.1; // Fallback sample time if no previous time available
ELSE
    deltaT := TO_REAL(CurrentTime - LastTime) / 1000.0;
END_IF;
LastTime := CurrentTime;

// --- PID Calculations ---
// Compute the error between the setpoint and the measured level
Error := SetPoint - LiquidLevel;

// Proportional term
Proportional := Kp * Error;

// Integral term with anti-windup (integral clamping)
Integral := Integral + (Ki * Error * deltaT);
IF Integral > IntMax THEN
    Integral := IntMax;
ELSIF Integral < IntMin THEN
    Integral := IntMin;
END_IF;

// Derivative term: based on the rate of change of error
IF deltaT > 0.0 THEN
    Derivative := Kd * ((Error - PrevError) / deltaT);
END_IF;
PrevError := Error;

// Apply derivative filtering for smoother response
FilteredDerivative := (FilterCoeff * Derivative) + ((1.0 - FilterCoeff) * FilteredDerivative);

// Combine the PID components to produce the PID output
PID_Output := Proportional + Integral + FilteredDerivative;

// --- Valve Control Logic ---
// Open the inlet valve if the liquid level is below the setpoint;
// otherwise, close the inlet valve.
IF LiquidLevel < SetPoint THEN
    InletValveOpen := TRUE;
ELSE
    InletValveOpen := FALSE;
END_IF;

END_PROGRAM