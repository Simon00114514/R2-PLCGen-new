PROGRAM pHControl
VAR_INPUT
    pHSensor         : INT;    // pH sensor reading
    LiquidLevelAlarm : BOOL;   // TRUE when the liquid level reaches the upper limit
    PIDReset         : BOOL;   // TRUE to reset the PID integral component
END_VAR

VAR_OUTPUT
    AcidicInjectionRate         : INT;  // Injection rate for acidic solution
    AlkalineInjectionRate       : INT;  // Injection rate for alkaline solution
    AcidicInjectionActive       : BOOL; // TRUE if acidic injection is active
    AlkalineInjectionActive     : BOOL; // TRUE if alkaline injection is active
    AcidicInjectionAccelerate   : BOOL; // TRUE if acidic injection speed is increased
    AlkalineInjectionAccelerate : BOOL; // TRUE if alkaline injection speed is increased
END_VAR

VAR
    SetPoint         : INT  := 7;   // Target pH value
    pH_Lower         : INT  := 5;   // Lower bound of allowable pH
    pH_Upper         : INT  := 8;   // Upper bound of allowable pH
    Kp               : INT  := 1;   // Proportional gain
    Ki               : INT  := 1;   // Integral gain
    Kd               : INT  := 1;   // Derivative gain
    error            : INT;         // PID error: SetPoint - pHSensor
    derivative       : INT;         // Derivative term
    integral         : INT;         // Integral term accumulator
    PID_Out          : INT;         // PID controller output
    prev_error       : INT;         // Previous error for derivative computation
    DeltaT           : INT  := 1;   // Sampling time (arbitrary units)
    baseAcidic       : INT  := 10;  // Base injection rate for acidic solution
    baseAlkaline     : INT  := 10;  // Base injection rate for alkaline solution
    absPID           : INT;         // Absolute value of PID_Out
END_VAR

// Main PID Feedback Control for pH Regulation
IF LiquidLevelAlarm = TRUE THEN
    AcidicInjectionRate         := 0;
    AlkalineInjectionRate       := 0;
    AcidicInjectionActive       := FALSE;
    AlkalineInjectionActive     := FALSE;
    AcidicInjectionAccelerate   := FALSE;
    AlkalineInjectionAccelerate := FALSE;
ELSE
    // Both injections remain active
    AcidicInjectionActive       := TRUE;
    AlkalineInjectionActive     := TRUE;
    
    // Reset PID integration if requested
    IF PIDReset = TRUE THEN
        integral   := 0;
        prev_error := 0;
    END_IF;
    
    // Compute PID components
    error      := SetPoint - pHSensor;
    integral   := integral + (error * DeltaT);
    derivative := error - prev_error;
    PID_Out    := (Kp * error) + (Ki * integral) + (Kd * derivative);
    prev_error := error;
    
    // Calculate absolute value for correction magnitude
    IF PID_Out < 0 THEN
        absPID := -PID_Out;
    ELSE
        absPID := PID_Out;
    END_IF;
    
    // Start with both injections at their base speeds and no acceleration.
    AcidicInjectionRate   := baseAcidic;
    AlkalineInjectionRate := baseAlkaline;
    AcidicInjectionAccelerate   := FALSE;
    AlkalineInjectionAccelerate := FALSE;
    
    // Adjust speeds based on measured pH
    IF pHSensor < pH_Lower THEN
        // pH too low: increase alkaline injection speed
        AlkalineInjectionRate       := baseAlkaline + absPID;
        AlkalineInjectionAccelerate := TRUE;
        // Acidic injection remains at base speed (no acceleration)
        AcidicInjectionAccelerate   := FALSE;
        
    ELSIF pHSensor > pH_Upper THEN
        // pH too high: increase acidic injection speed
        AcidicInjectionRate         := baseAcidic + absPID;
        AcidicInjectionAccelerate   := TRUE;
        // Alkaline injection remains at base speed (no acceleration)
        AlkalineInjectionAccelerate := FALSE;
        
    ELSE
        // pH near the target: perform fine adjustment
        IF error > 0 THEN
            // pH is below target: boost alkaline injection slightly
            AlkalineInjectionRate       := baseAlkaline + PID_Out;
            AlkalineInjectionAccelerate := (PID_Out > 0);
            AcidicInjectionAccelerate   := FALSE;
        ELSE
            // pH is above target: boost acidic injection slightly
            AcidicInjectionRate         := baseAcidic - PID_Out;
            AcidicInjectionAccelerate   := (PID_Out < 0);
            AlkalineInjectionAccelerate := FALSE;
        END_IF;
    END_IF;
END_IF;
END_PROGRAM