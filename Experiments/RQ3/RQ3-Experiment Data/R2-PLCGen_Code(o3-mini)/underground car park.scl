PROGRAM UndergroundParkingControl
VAR_INPUT
    X1 : BOOL;    // Photoelectric sensor at ground floor entrance/exit
    X2 : BOOL;    // Photoelectric sensor at basement entrance/exit
END_VAR

VAR_OUTPUT
    Y1 : BOOL;    // Red light at both entrances/exits
    Y2 : BOOL;    // Green light at both entrances/exits
END_VAR

VAR
    State      : INT := 0;       // System state: 0 = Idle, 1 = GroundFloorIn (M20 active), 2 = BasementIn (M30 active)
    PrevX1     : BOOL := FALSE;  // Previous value of X1
    PrevX2     : BOOL := FALSE;  // Previous value of X2
    M20        : BOOL := FALSE;  // Flag: activated when a vehicle enters from ground floor
    M30        : BOOL := FALSE;  // Flag: activated when a vehicle enters from basement
    risingX1   : BOOL;           // Rising edge flag for X1
    risingX2   : BOOL;           // Rising edge flag for X2
    ScanCounter: INT := 0;       // Counter used as a timeout mechanism for state recovery
END_VAR

CONST
    TIMEOUT : INT := 50;        // Timeout threshold in scan cycles
END_CONST

// Detect rising edges on the sensors
risingX1 := X1 AND NOT PrevX1;
risingX2 := X2 AND NOT PrevX2;

// Main state machine to control the traffic lights
IF State = 0 THEN   // Idle state: Green light is on
    Y1 := FALSE;
    Y2 := TRUE;
    M20 := FALSE;
    M30 := FALSE;
    ScanCounter := 0;   // Reset timeout counter in idle state

    // Check if a new vehicle is detected at either sensor
    IF risingX1 = TRUE THEN
        State := 1;      // Transition: Vehicle entering from ground floor
        M20 := TRUE;     // Activate intermediate flag M20
        Y1 := TRUE;      // Turn on red light
        Y2 := FALSE;     // Turn off green light
    ELSIF risingX2 = TRUE THEN
        State := 2;      // Transition: Vehicle entering from basement
        M30 := TRUE;     // Activate intermediate flag M30
        Y1 := TRUE;      // Turn on red light
        Y2 := FALSE;     // Turn off green light
    ELSE
        Y1 := FALSE;
        Y2 := TRUE;
    END_IF;
ELSIF State = 1 THEN   // Processing state: Vehicle entered from ground floor (M20 active)
    Y1 := TRUE;
    Y2 := FALSE;
    // Check if the expected sensor event occurs: vehicle reaches basement (rising edge on X2)
    IF risingX2 = TRUE THEN
        State := 0;         // Transition back to idle state
        M20 := FALSE;       // Reset flag M20
        Y1 := FALSE;        // Turn off red light
        Y2 := TRUE;         // Restore green light
        ScanCounter := 0;   // Reset timeout counter
    ELSE
        // Increment the timeout counter; if threshold is reached, force state recovery
        ScanCounter := ScanCounter + 1;
        IF ScanCounter >= TIMEOUT THEN
            State := 0;         // Force transition to idle state
            M20 := FALSE;       // Reset flag M20
            Y1 := FALSE;        // Ensure red light is off
            Y2 := TRUE;         // Restore green light
            ScanCounter := 0;   // Reset the counter after timeout
        END_IF;
    END_IF;
ELSIF State = 2 THEN   // Processing state: Vehicle entered from basement (M30 active)
    Y1 := TRUE;
    Y2 := FALSE;
    // Check if the expected sensor event occurs: vehicle reaches ground floor exit (rising edge on X1)
    IF risingX1 = TRUE THEN
        State := 0;         // Transition back to idle state
        M30 := FALSE;       // Reset flag M30
        Y1 := FALSE;        // Turn off red light
        Y2 := TRUE;         // Restore green light
        ScanCounter := 0;   // Reset timeout counter
    ELSE
        // Increment timeout counter; if threshold is reached, force state recovery
        ScanCounter := ScanCounter + 1;
        IF ScanCounter >= TIMEOUT THEN
            State := 0;         // Force transition to idle state
            M30 := FALSE;       // Reset flag M30
            Y1 := FALSE;        // Turn off red light
            Y2 := TRUE;         // Restore green light
            ScanCounter := 0;   // Reset the counter after timeout
        END_IF;
    END_IF;
END_IF;

// Update previous sensor values for the next scan cycle
PrevX1 := X1;
PrevX2 := X2;

END_PROGRAM