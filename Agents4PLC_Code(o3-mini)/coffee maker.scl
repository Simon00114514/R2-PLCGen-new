PROGRAM CoffeeMachineControl
VAR
    // Hardware Inputs
    Emergency_Stop    : BOOL;    // Emergency stop button
    Start             : BOOL;    // Machine start button
    Mode_CoffeeMilk   : BOOL;    // True for coffee+milk mode
    Mode_CoffeeOnly   : BOOL;    // True for coffee-only mode
    MixerTank_Level   : INT;    // Mixer tank level in milliliters

    // Hardware Outputs
    Coffee_Valve      : BOOL;    // Controls coffee inlet valve
    Milk_Valve        : BOOL;    // Controls milk inlet valve
    Output_Valve      : BOOL;    // Controls the output valve (dispensing)
    Mixer             : BOOL;    // Controls the mixer motor

    // Internal variables and timer instance
    MixingTimer       : TON;     // Timer function block instance for mixing (4-second delay)
    TimerStart        : BOOL;    // Dedicated flag to start/stop the timer
    MachineState      : INT;     // State machine: 0 = Idle, 1 = Filling, 2 = Mixing, 3 = Dispensing
END_VAR

// Execute the timer function block for the mixing phase.
MixingTimer(IN := TimerStart, PT := T#4s);

// Top-level emergency stop logic to override any operation.
IF Emergency_Stop THEN
    Coffee_Valve := FALSE;
    Milk_Valve   := FALSE;
    Output_Valve := FALSE;
    Mixer        := FALSE;
    TimerStart   := FALSE;    // Ensure the timer is not running
    MachineState := 0;        // Reset state machine to Idle

ELSE
    CASE MachineState OF
        0: // Idle state  ensure outputs and timer are reset.
            Coffee_Valve := FALSE;
            Milk_Valve   := FALSE;
            Output_Valve := FALSE;
            Mixer        := FALSE;
            TimerStart   := FALSE;
            // Start a new cycle if the start button is pressed
            IF Start THEN
                MachineState := 1;
            END_IF;
            
        1: // Filling state  open valves based on mode choice.
            IF Mode_CoffeeMilk THEN
                Coffee_Valve := TRUE;
                Milk_Valve   := TRUE;
            ELSIF Mode_CoffeeOnly THEN
                Coffee_Valve := TRUE;
                Milk_Valve   := FALSE;
            ELSE
                // If no valid mode is selected, return to Idle.
                MachineState := 0;
            END_IF;
            
            // When the mixer tank is full (at or above 130 ml), close input valves.
            IF MixerTank_Level >= 130 THEN
                Coffee_Valve := FALSE;
                Milk_Valve   := FALSE;
                IF Mode_CoffeeMilk THEN
                    MachineState := 2;  // Proceed to mixing for coffee+milk mode.
                ELSIF Mode_CoffeeOnly THEN
                    MachineState := 3;  // Skip mixing for coffee-only mode.
                END_IF;
            END_IF;
            
        2: // Mixing state  run the mixer for 4 seconds.
            Mixer      := TRUE;
            TimerStart := TRUE;  // Activate the timer once here
            IF MixingTimer.Q THEN
                Mixer      := FALSE;    // Stop the mixer once the timer elapses
                TimerStart := FALSE;    // Reset timer control flag
                // Optional: Explicitly reset the timer block if needed:
                MixingTimer(IN := FALSE);
                MachineState := 3;       // Transition to dispensing phase
            END_IF;
            
        3: // Dispensing state  open output valve and wait till dispensing is complete.
            Output_Valve := TRUE;
            // When dispensing is finished (e.g. mixer tank level falls below a threshold),
            // reset outputs and return to idle.
            IF MixerTank_Level < 5 THEN   // Assuming near-zero level indicates completed dispensing
                Output_Valve := FALSE;
                MachineState := 0;
            END_IF;
            
        ELSE
            // For any unexpected state, revert to Idle.
            MachineState := 0;
    END_CASE;
END_IF;

END_PROGRAM