PROGRAM WaterPumpControl
VAR
    // Input signals
    PB_Start         : BOOL;  // Start pushbutton 鈥� operator requests pump start
    PB_Stop          : BOOL;  // Stop pushbutton 鈥� operator requests pump stop
    HighLevelSensor  : BOOL;  // High water level sensor 鈥� indicates the tank is full

    // Output signals
    PumpRelay        : BOOL;  // Output to control the water pump motor
    DrainValve       : BOOL;  // Output to control the drain valve

    // Internal memory bits
    PumpLatch        : BOOL := FALSE;  // Holds the current latch state of the pump
    SetLatch         : BOOL := FALSE;  // Boolean signal to SET (latch) the pump
    ResetLatch       : BOOL := FALSE;  // Boolean signal to RESET (unlatch) the pump
END_VAR

// --- Determine Latch Control Signals ---
// The SET signal is activated when the start pushbutton is pressed,
// the pump is not already latched, and the high-level sensor is not active (tank is not full).
SetLatch := PB_Start AND (NOT PumpLatch) AND (NOT HighLevelSensor);

// The RESET signal is activated when either the stop pushbutton is pressed or
// the high-level sensor indicates that the tank is full.
ResetLatch := PB_Stop OR HighLevelSensor;

// --- Process SET and RESET Commands ---
// Explicitly use the SET command to latch the pump.
IF SetLatch THEN
    PumpLatch := TRUE;
END_IF;

// Explicitly use the RESET command to unlatch the pump.
IF ResetLatch THEN
    PumpLatch := FALSE;
END_IF;

// --- Control the Pump Relay ---
// The pump relay follows the latch state.
PumpRelay := PumpLatch;

// --- Control the Drain Valve ---
// When the pump is off and the high-level sensor is active (tank is full),
// enable the drain valve. Otherwise, keep it off.
IF (NOT PumpRelay) AND HighLevelSensor THEN
    DrainValve := TRUE;
ELSE
    DrainValve := FALSE;
END_IF;

END_PROGRAM
